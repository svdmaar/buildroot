diff --git a/CMakeLists.txt b/CMakeLists.txt
index b61f2fd..ec868cb 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -111,7 +111,7 @@ endif()
 
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-multichar -std=c++11 -Wno-non-virtual-dtor -Werror=effc++")
 
-if(CMAKE_IARM_MGR)
+if(CMAKE_RDK_VIDEO_BUILD AND CMAKE_IARM_MGR)
 	message("CMAKE_IARM_MGR set")
 	set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DIARM_MGR")
 endif()
@@ -132,7 +132,11 @@ endif()
 if(CMAKE_DASH_DRM)
 	message("CMAKE_DASH_DRM set")
 	if(CMAKE_USE_OPENCDM)
+		set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_OPENCDM")
 		set(LIBAAMP_DRM_SOURCES drm/AampDRMSessionManager.cpp drm/AampDrmSession.cpp drm/opencdmsession.cpp drm/aampdrmsessionfactory.cpp drm/aampoutputprotection.cpp drm/AampDRMutils.cpp)
+	elseif(CMAKE_USE_OPENCDM_ADAPTER)
+		set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_OPENCDM -DUSE_OPENCDM_ADAPTER")
+		set(LIBAAMP_DRM_SOURCES drm/AampDRMSessionManager.cpp drm/AampDrmSession.cpp drm/opencdmsessionadapter.cpp drm/aampdrmsessionfactory.cpp drm/aampoutputprotection.cpp drm/AampDRMutils.cpp)
 	else()
 		set(LIBAAMP_DRM_SOURCES drm/AampDRMSessionManager.cpp drm/AampDrmSession.cpp drm/playreadydrmsession.cpp drm/aampdrmsessionfactory.cpp drm/aampoutputprotection.cpp drm/AampDRMutils.cpp)
 	endif()
@@ -145,7 +149,11 @@ add_executable(playbintest test/playbintest.cpp)
 target_link_libraries(playbintest ${PLAYBINTEST_DEPENDS})
 
 if(CMAKE_DASH_DRM)
-	set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -lIARMBus -lds -ldshalcli")
+	if(CMAKE_RDK_VIDEO_BUILD)
+		message("CMAKE_RDK_VIDEO_BUILD set")
+		set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -lIARMBus -lds -ldshalcli")
+		set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DRDK_VIDEO_BUILD=1")
+	endif()
 	if(CMAKE_USE_OPENCDM)
 		if (DEFINED SECAPI_ENGINE_BROADCOM_SAGE)
 			set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_SECAPI_BRCMHW=1")
@@ -163,7 +171,13 @@ if(CMAKE_DASH_DRM)
 		endif()
 		find_path (STAGING_INCDIR opencdm)
 		include_directories(${STAGING_INCDIR}/opencdm)
-	else()
+	elseif(CMAKE_USE_OPENCDM_ADAPTER)
+		set(LIBAAMP_DEPENDS "${LIBAAMP_DEPENDS} -locdm")
+		find_path (STAGING_INCDIR opencdm)
+		find_path (STAGING_INCDIR gstreamer-1.0)
+		include_directories(${STAGING_INCDIR}/opencdm)
+		include_directories(${STAGING_INCDIR}/gstreamer-1.0)
+	else ()
 		if (DEFINED SECAPI_ENGINE_BROADCOM_SAGE)
 			set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_SECAPI_BRCMHW=1")
 			if(DEFINED SAGE_SVP)
diff --git a/aampgstplayer.cpp b/aampgstplayer.cpp
index c43d063..a90dc62 100644
--- a/aampgstplayer.cpp
+++ b/aampgstplayer.cpp
@@ -1158,6 +1158,7 @@ static GstBusSyncReply bus_sync_handler(GstBus * bus, GstMessage * msg, AAMPGstP
 			GstStructure* contextStructure = gst_context_writable_structure(context);
 			gst_structure_set(contextStructure, "decryption-system-id", G_TYPE_STRING, GetDrmSystemID((DRMSystems)gpGlobalConfig->preferredDrm),  NULL);
 			gst_element_set_context(GST_ELEMENT(GST_MESSAGE_SRC(msg)), context);
+			_this->aamp->setCurrentDrm((DRMSystems)gpGlobalConfig->preferredDrm);
 		}
 
 		break;
diff --git a/drm/AampDRMSessionManager.cpp b/drm/AampDRMSessionManager.cpp
index da58276..68c9ca7 100644
--- a/drm/AampDRMSessionManager.cpp
+++ b/drm/AampDRMSessionManager.cpp
@@ -917,7 +917,6 @@ AampDrmSession * AampDRMSessionManager::createDrmSession(
 		return NULL;
 	}
 
-
 	drmSessionContexts[sessionType].drmSession->generateAampDRMSession(initDataPtr, dataLength);
 	code = drmSessionContexts[sessionType].drmSession->getState();
 	if (code != KEY_INIT)
@@ -1244,6 +1243,7 @@ AampDrmSession * AampDRMSessionManager::createDrmSession(
 		reinterpret_cast<const void*>(keyId),keyIdLen);
 		pthread_mutex_unlock(&session_mutex[sessionType]);
 		free(keyId);
+
 		return drmSessionContexts[sessionType].drmSession;
 	}
 	else if (code == KEY_ERROR)
diff --git a/drm/aampdrmsessionfactory.cpp b/drm/aampdrmsessionfactory.cpp
index e64a747..b9fe7b6 100644
--- a/drm/aampdrmsessionfactory.cpp
+++ b/drm/aampdrmsessionfactory.cpp
@@ -23,7 +23,9 @@
 */
 
 #include "aampdrmsessionfactory.h"
-#ifdef USE_OPENCDM
+#if defined(USE_OPENCDM_ADAPTER)
+#include "opencdmsessionadapter.h"
+#elif defined(USE_OPENCDM)
 #include "opencdmsession.h"
 #else
 #include "playreadydrmsession.h"
@@ -43,7 +45,7 @@ AampDrmSession* AampDrmSessionFactory::GetDrmSession(const char* systemid)
 	{
 #ifdef USE_OPENCDM
         std::string key_system = PLAYREADY_KEY_SYSTEM_STRING;
-        drmSession = new OpenCDMSession(key_system);
+        drmSession = new OcdmDrmSession(key_system);
 #else
 		drmSession = new PlayReadyDRMSession();
 #endif
@@ -51,7 +53,7 @@ AampDrmSession* AampDrmSessionFactory::GetDrmSession(const char* systemid)
     {
 #ifdef USE_OPENCDM
         std::string key_system = WIDEVINE_KEY_SYSTEM_STRING;
-        drmSession = new OpenCDMSession(key_system);
+        drmSession = new OcdmDrmSession(key_system);
 #endif
     }
 	return drmSession;
diff --git a/drm/aampoutputprotection.cpp b/drm/aampoutputprotection.cpp
index b1fc603..d1f6b58 100644
--- a/drm/aampoutputprotection.cpp
+++ b/drm/aampoutputprotection.cpp
@@ -62,11 +62,13 @@ AampOutputProtection::AampOutputProtection()
     // Get initial HDCP status
     SetHDMIStatus();
 
+#ifdef RDK_VIDEO_BUILD
     // Register IARM callbacks
     logprintf("%s : registering DSMGR events...\n", __FUNCTION__);
     IARM_Bus_RegisterEventHandler(IARM_BUS_DSMGR_NAME,IARM_BUS_DSMGR_EVENT_HDMI_HOTPLUG, HDMIEventHandler);
     IARM_Bus_RegisterEventHandler(IARM_BUS_DSMGR_NAME,IARM_BUS_DSMGR_EVENT_HDCP_STATUS, HDMIEventHandler);
     IARM_Bus_RegisterEventHandler(IARM_BUS_DSMGR_NAME,IARM_BUS_DSMGR_EVENT_RES_POSTCHANGE, ResolutionHandler);
+#endif // RDK_VIDEO_BUILD
 }
 
 /**
@@ -75,12 +77,13 @@ AampOutputProtection::AampOutputProtection()
 AampOutputProtection::~AampOutputProtection()
 {
     DEBUG_FUNC;
-
+#ifdef RDK_VIDEO_BUILD
     // Register IARM callbacks
     logprintf("%s : unregistering DSMGR events...\n", __FUNCTION__);
     IARM_Bus_RemoveEventHandler(IARM_BUS_DSMGR_NAME,IARM_BUS_DSMGR_EVENT_HDMI_HOTPLUG, HDMIEventHandler);
     IARM_Bus_RemoveEventHandler(IARM_BUS_DSMGR_NAME,IARM_BUS_DSMGR_EVENT_HDCP_STATUS, HDMIEventHandler);
     IARM_Bus_RemoveEventHandler(IARM_BUS_DSMGR_NAME,IARM_BUS_DSMGR_EVENT_RES_POSTCHANGE, ResolutionHandler);
+#endif // RDK_VIDEO_BUILD
 
     s_pAampOP = NULL;
 
@@ -197,6 +200,7 @@ bool AampOutputProtection::IsSourceUHD()
  */
 void AampOutputProtection::SetHDMIStatus()
 {
+#ifdef RDK_VIDEO_BUILD
     bool                    isConnected              = false;
     bool                    isHDCPCompliant          = false;
     bool                    isHDCPEnabled            = true;
@@ -246,6 +250,12 @@ void AampOutputProtection::SetHDMIStatus()
         m_hdcpCurrentProtocol = dsHDCP_VERSION_1X;
         logprintf("%s : GetHDCPVersion: Did not detect HDCP version defaulting to 1.4 (%d)\n", __FUNCTION__, m_hdcpCurrentProtocol);
     }
+#else
+	// No video output on device mark HDCP protection as valid
+	m_hdcpCurrentProtocol = dsHDCP_VERSION_1X;
+	m_isHDCPEnabled = true;
+	return;
+#endif // RDK_VIDEO_BUILD
 
     return;
 }
@@ -340,6 +350,7 @@ DRM_RESULT DRM_CALL AampOutputProtection::PR_OP_Callback(const DRM_VOID *f_pvOut
 #endif
 
 
+#ifdef RDK_VIDEO_BUILD
 /**
  * @brief IARM event handler for HDCP and HDMI hot plug events
  * @param owner
@@ -425,6 +436,7 @@ void AampOutputProtection::ResolutionHandler(const char *owner, IARM_EventId_t e
 
     pInstance->Release();
 }
+#endif // RDK_VIDEO_BUILD
 
 
 /**
diff --git a/drm/aampoutputprotection.h b/drm/aampoutputprotection.h
index 3ddea5e..2e6aac6 100644
--- a/drm/aampoutputprotection.h
+++ b/drm/aampoutputprotection.h
@@ -27,6 +27,7 @@
 
 #include <pthread.h>
 
+#ifdef RDK_VIDEO_BUILD
 // IARM
 #include "manager.hpp"
 #include "host.hpp"
@@ -39,6 +40,13 @@
 #include "dsMgr.h"
 #include "dsDisplay.h"
 #include <iarmUtil.h>
+#else
+#include <stdint.h>
+typedef int dsHdcpProtocolVersion_t;
+#define dsHDCP_VERSION_MAX      30
+#define dsHDCP_VERSION_2X       22
+#define dsHDCP_VERSION_1X       14
+#endif // RDK_VIDEO_BUILD
 
 #include <stdio.h>
 #include <gst/gst.h>
@@ -165,9 +173,11 @@ public:
 
     // IARM Callbacks
 
+#ifdef RDK_VIDEO_BUILD
     static void HDMIEventHandler(const char *owner, IARM_EventId_t eventId, void *data, size_t len);
 
     static void ResolutionHandler(const char *owner, IARM_EventId_t eventId, void *data, size_t len);
+#endif // RDK_VIDEO_BUILD
 
     // State functions
 
diff --git a/drm/opencdmsession.cpp b/drm/opencdmsession.cpp
index dd102dc..8b054fe 100644
--- a/drm/opencdmsession.cpp
+++ b/drm/opencdmsession.cpp
@@ -148,26 +148,26 @@ struct Rpc_Secbuf_Info {
 //The following flag is used to use old or new(wpeframework) OpenCDM implementation
 #define USE_NEW_OPENCDM 1
 
-OpenCDMSession::OpenCDMSession(string& keySystem) :
+OcdmDrmSession::OcdmDrmSession(string& keySystem) :
 		AampDrmSession(keySystem),
-		m_eKeyState(KEY_INIT), 
+		m_eKeyState(KEY_INIT),
 		m_pOutputProtection(NULL),
 		m_pOpencdm(NULL),
 		m_pOpencdmDecrypt(NULL),
 		decryptMutex(),
 		m_sessionID()
 {
-	logprintf("OpenCDMSession :: enter \n");
+	logprintf("OcdmDrmSession :: enter \n");
 	pthread_mutex_init(&decryptMutex,NULL);
 
 	initAampDRMSession();
 
 	// Get output protection pointer
 	m_pOutputProtection = AampOutputProtection::GetAampOutputProcectionInstance();
-	logprintf("OpenCDMSession :: exit \n");
+	logprintf("OcdmDrmSession :: exit \n");
 }
 
-void OpenCDMSession::initAampDRMSession()
+void OcdmDrmSession::initAampDRMSession()
 {
 	logprintf("initAampDRMSession :: enter \n");
 	if (m_pOpencdm == NULL) {
@@ -178,7 +178,7 @@ void OpenCDMSession::initAampDRMSession()
 	logprintf("initAampDRMSession :: exit \n");
 }
 
-void OpenCDMSession::generateAampDRMSession(const uint8_t *f_pbInitData,
+void OcdmDrmSession::generateAampDRMSession(const uint8_t *f_pbInitData,
 		uint32_t f_cbInitData)
 {
 	logprintf("generateAampDRMSession :: enter \n");
@@ -190,10 +190,10 @@ void OpenCDMSession::generateAampDRMSession(const uint8_t *f_pbInitData,
 	std::string sessionId;
 	m_pOpencdm->CreateSession("video/mp4", const_cast<unsigned char*>(f_pbInitData), f_cbInitData, sessionId);
 	logprintf("generateAampDRMSession :: sessionId : %s \n", sessionId.c_str());
-#endif    
+#endif
 }
 
-OpenCDMSession::~OpenCDMSession()
+OcdmDrmSession::~OcdmDrmSession()
 {
 	logprintf("[HHH]OCDMSession destructor called! keySystem %s\n", m_keySystem.c_str());
 	pthread_mutex_destroy(&decryptMutex);
@@ -224,7 +224,7 @@ OpenCDMSession::~OpenCDMSession()
 }
 
 
-DrmData * OpenCDMSession::aampGenerateKeyRequest(string& destinationURL)
+DrmData * OcdmDrmSession::aampGenerateKeyRequest(string& destinationURL)
 {
 	DrmData * result = NULL;
 
@@ -279,7 +279,7 @@ DrmData * OpenCDMSession::aampGenerateKeyRequest(string& destinationURL)
 }
 
 
-int OpenCDMSession::aampDRMProcessKey(DrmData* key)
+int OcdmDrmSession::aampDRMProcessKey(DrmData* key)
 {
 	int retvalue = -1;
 
@@ -305,7 +305,7 @@ int OpenCDMSession::aampDRMProcessKey(DrmData* key)
 #endif
 }
 
-int OpenCDMSession::decrypt(const uint8_t *f_pbIV, uint32_t f_cbIV,
+int OcdmDrmSession::decrypt(const uint8_t *f_pbIV, uint32_t f_cbIV,
 		const uint8_t *payloadData, uint32_t payloadDataSize, uint8_t **ppOpaqueData)
 {
 #ifdef USE_SAGE_SVP
@@ -340,6 +340,7 @@ int OpenCDMSession::decrypt(const uint8_t *f_pbIV, uint32_t f_cbIV,
 
 	pthread_mutex_lock(&decryptMutex);
 	start_decrypt_time = GetCurrentTimeStampInMSec();
+
 #if USE_NEW_OPENCDM
 	retvalue = m_pOpencdmDecrypt->Decrypt(const_cast<unsigned char*>(payloadData), payloadDataSize, f_pbIV, f_cbIV);
 #else
@@ -363,12 +364,12 @@ int OpenCDMSession::decrypt(const uint8_t *f_pbIV, uint32_t f_cbIV,
 
 }
 
-KeyState OpenCDMSession::getState()
+KeyState OcdmDrmSession::getState()
 {
 	return m_eKeyState;
 }
 
-void OpenCDMSession:: clearDecryptContext()
+void OcdmDrmSession:: clearDecryptContext()
 {
 	logprintf("[HHH] clearDecryptContext.\n");
 
diff --git a/drm/opencdmsession.h b/drm/opencdmsession.h
index 03a9b49..603379a 100644
--- a/drm/opencdmsession.h
+++ b/drm/opencdmsession.h
@@ -21,8 +21,8 @@
  *
  */
 
-#ifndef OpenCDMSession_h
-#define OpenCDMSession_h
+#ifndef OcdmDrmSession_h
+#define OcdmDrmSession_h
 
 #include "AampDrmSession.h"
 #include "aampoutputprotection.h"
@@ -30,10 +30,10 @@
 using namespace std;
 
 /**
- * @class OpenCDMSession
+ * @class OcdmDrmSession
  * @brief Open CDM DRM session
  */
-class OpenCDMSession : public AampDrmSession
+class OcdmDrmSession : public AampDrmSession
 {
 
 private:
@@ -47,10 +47,10 @@ private:
 	void initAampDRMSession();
 
 public:
-    OpenCDMSession(string& keySystem);
-	~OpenCDMSession();
-	OpenCDMSession(const OpenCDMSession&) = delete;
-	OpenCDMSession& operator=(const OpenCDMSession&) = delete;
+	OcdmDrmSession(string& keySystem);
+	~OcdmDrmSession();
+	OcdmDrmSession(const OcdmDrmSession&) = delete;
+	OcdmDrmSession& operator=(const OcdmDrmSession&) = delete;
 	void generateAampDRMSession(const uint8_t *f_pbInitData,
 			uint32_t f_cbInitData);
 	DrmData * aampGenerateKeyRequest(string& destinationURL);
diff --git a/drm/opencdmsessionadapter.cpp b/drm/opencdmsessionadapter.cpp
index e69de29..151aec4 100644
--- a/drm/opencdmsessionadapter.cpp
+++ b/drm/opencdmsessionadapter.cpp
@@ -0,0 +1,349 @@
+#include "config.h"
+#include "opencdmsessionadapter.h"
+
+#include <gst/gst.h>
+#include <assert.h>
+#include <iostream>
+#include <sstream>
+#include <string>
+#include <string.h>
+#include <vector>
+#include <sys/utsname.h>
+#include "priv_aamp.h"
+
+#include <sys/time.h>
+#include <gst/gstbuffer.h>
+#define USEC_PER_SEC   1000000
+static inline uint64_t GetCurrentTimeStampInUSec()
+{
+	   struct timeval  timeStamp;
+	   uint64_t        retVal = 0;
+
+	   gettimeofday(&timeStamp, NULL);
+
+	   // Convert timestamp to Micro Seconds
+	   retVal = (uint64_t)(((uint64_t)timeStamp.tv_sec * USEC_PER_SEC) + timeStamp.tv_usec);
+
+	   return retVal;
+}
+static inline uint64_t GetCurrentTimeStampInMSec()
+{
+	   return GetCurrentTimeStampInUSec() / 1000;
+}
+
+#define LOG_DECRYPT_STATS 1
+#define DECRYPT_AVG_TIME_THRESHOLD 5.0 //5 milliseconds
+#ifdef LOG_DECRYPT_STATS
+#define MAX_THREADS 10
+#define INTERVAL 120
+
+/**
+ * @struct DecryptStats
+ * @brief Holds decryption profile stats
+ */
+struct DecryptStats
+{
+    uint64_t    nBytesInterval;
+    uint64_t    nTimeInterval;
+    uint64_t    nBytesTotal;
+    uint64_t    nTimeTotal;
+    uint64_t    nCallsTotal;
+    pthread_t   threadID;
+
+};
+#endif // LOG_DECRYPT_STATS
+#define SEC_SIZE size_t
+void LogPerformanceExt(const char* strFunc, uint64_t msStart, uint64_t msEnd, SEC_SIZE nDataSize)
+{
+    bool        bThreshold  = false;
+    uint64_t    delta       = msEnd - msStart;
+    uint32_t    nRateMin    = 1000;     // Bytes/ms
+    uint32_t    nRestart    = 5;
+    uint32_t    nDataMin    = 1000;
+    uint32_t    nTimeMin    = 5; // Can not be < 1 to protect against divide by 0 error
+
+#ifdef LOG_DECRYPT_STATS
+    {
+        static DecryptStats stats[MAX_THREADS] = { 0 };
+        int idx = 0;
+        while(idx < MAX_THREADS) {
+            if(stats[idx].threadID == pthread_self()) {
+                break;
+            }
+            idx++;
+        }
+        if(idx == MAX_THREADS) {
+            // new thread
+            idx = 0;
+            while(idx < MAX_THREADS) {
+                if(stats[idx].threadID == 0) {
+                    // empty slot
+                    stats[idx].threadID = pthread_self();
+                    break;
+                }
+                idx++;
+            }
+        }
+        if(idx == MAX_THREADS) {
+            printf("%s >>>>>>>> All slots allocated!!!, idx = %d, clearing the array.\n", __FUNCTION__, idx);
+            memset(stats, 0, sizeof(DecryptStats) * MAX_THREADS);
+            return;
+        }
+
+        if(nDataSize > 0 ) {
+            stats[idx].nBytesInterval     += (uint64_t)nDataSize;
+            stats[idx].nTimeInterval      += delta;
+            stats[idx].nCallsTotal++;
+
+            if(stats[idx].nCallsTotal % INTERVAL == 0) {
+               stats[idx].nBytesTotal += stats[idx].nBytesInterval;
+               stats[idx].nTimeTotal += stats[idx].nTimeInterval;
+               double avgTime = (double)stats[idx].nTimeTotal/(double)stats[idx].nCallsTotal;
+               if(avgTime >= DECRYPT_AVG_TIME_THRESHOLD) {
+                  logprintf("%s >>>>>>>> Thread ID %X (%d) Avg Time %0.2llf ms, Avg Bytes %llu  calls (%llu) Interval avg time %0.2llf, Interval avg bytes %llu\n",
+                     strFunc, stats[idx].threadID, idx, avgTime, stats[idx].nBytesTotal/stats[idx].nCallsTotal,
+                     stats[idx].nCallsTotal, (double)stats[idx].nTimeInterval/(double)INTERVAL,
+                     stats[idx].nBytesInterval/INTERVAL);
+               }
+               stats[idx].nBytesInterval = 0;
+               stats[idx].nTimeInterval = 0;
+
+            }
+        }
+    }
+#endif //LOG_DECRYPT_STATS
+}
+
+OcdmDrmSession::OcdmDrmSession(string& keySystem) :
+		AampDrmSession(keySystem),
+		m_decryptMutex(),
+		m_eKeyState(KEY_INIT),
+		m_pOpenCDMSystem(NULL),
+		m_pOpenCDMSession(NULL),
+		m_OCDMSessionCallbacks(),
+		m_pOutputProtection(NULL),
+		m_challenge(),
+		m_challengeSize(0),
+		m_destUrl(),
+		m_keyStatus(KeyStatus::Expired),
+		m_challengeReady(),
+		m_keyStatusReady(),
+		m_sessionID(),
+		m_keyId(NULL),
+		m_keySize(0)
+{
+	logprintf("OcdmDrmSession :: enter \n");
+	pthread_mutex_init(&m_decryptMutex, NULL);
+
+	initAampDRMSystem();
+
+	// Get output protection pointer
+	m_pOutputProtection = AampOutputProtection::GetAampOutputProcectionInstance();
+	logprintf("OcdmDrmSession :: exit \n");
+}
+
+void OcdmDrmSession::initAampDRMSystem()
+{
+	logprintf("initAampDRMSystem :: enter \n");
+	pthread_mutex_lock(&m_decryptMutex);
+	if (m_pOpenCDMSystem == nullptr) {
+		m_pOpenCDMSystem = opencdm_create_system("com.microsoft.playready");
+	}
+	pthread_mutex_unlock(&m_decryptMutex);
+	logprintf("initAampDRMSystem :: exit \n");
+}
+
+OcdmDrmSession::~OcdmDrmSession()
+{
+	logprintf("[HHH]OCDMSession destructor called! keySystem %s\n", m_keySystem.c_str());
+	clearDecryptContext();
+
+	pthread_mutex_destroy(&m_decryptMutex);
+
+	if (m_pOpenCDMSession) {
+		opencdm_destruct_session(m_pOpenCDMSession);
+		m_pOpenCDMSession = NULL;
+	}
+
+	if (m_pOpenCDMSystem) {
+		opencdm_destruct_system(m_pOpenCDMSystem);
+		m_pOpenCDMSystem = NULL;
+	}
+
+	if(m_pOutputProtection) {
+		m_pOutputProtection->Release();
+	}
+
+	if (!m_keyId) {
+		free(m_keyId);
+		m_keyId = nullptr;
+	}
+
+}
+
+void OcdmDrmSession::generateAampDRMSession(const uint8_t *f_pbInitData,
+		uint32_t f_cbInitData)
+{
+	logprintf("generateAampDRMSession :: enter \n");
+
+	pthread_mutex_lock(&m_decryptMutex);
+
+	memset(&m_OCDMSessionCallbacks, 0, sizeof(m_OCDMSessionCallbacks));
+	m_OCDMSessionCallbacks.process_challenge_callback = [](OpenCDMSession* session, void* userData, const char destUrl[], const uint8_t challenge[], const uint16_t challengeSize) {
+
+		OcdmDrmSession* userSession = reinterpret_cast<OcdmDrmSession*>(userData);
+		userSession->processOCDMChallenge(destUrl, challenge, challengeSize);
+	};
+
+	m_OCDMSessionCallbacks.key_update_callback = [](OpenCDMSession* session, void* userData, const uint8_t key[], const uint8_t keySize) {
+		OcdmDrmSession* userSession = reinterpret_cast<OcdmDrmSession*>(userData);
+		userSession->keyUpdatedOCDM(key, keySize);
+	};
+
+	m_OCDMSessionCallbacks.error_message_callback = [](OpenCDMSession* session, void* userData, const char message[]) {
+	};
+
+	opencdm_construct_session(m_pOpenCDMSystem, LicenseType::Temporary, "video/mp4",
+				  const_cast<uint8_t*>(f_pbInitData), f_cbInitData,
+				  nullptr, 0, //No Custom Data
+				  &m_OCDMSessionCallbacks,
+				  static_cast<void*>(this),
+				  &m_pOpenCDMSession);
+	if (!m_pOpenCDMSession) {
+		logprintf("Could not create session");
+		return;
+	}
+
+	pthread_mutex_unlock(&m_decryptMutex);
+}
+
+void OcdmDrmSession::processOCDMChallenge(const char destUrl[], const uint8_t challenge[], const uint16_t challengeSize) {
+
+	m_challenge.assign(reinterpret_cast<const char *>(challenge), challengeSize);
+	logprintf("processOCDMChallenge challenge = %s\n", m_challenge.c_str());
+
+	m_destUrl.assign(destUrl);
+	logprintf("processOCDMChallenge destUrl = %s\n", m_destUrl.c_str());
+
+	m_challengeReady.signal();
+}
+
+void OcdmDrmSession::keyUpdatedOCDM(const uint8_t key[], const uint8_t keySize) {
+	if (m_pOpenCDMSession) {
+		m_keyStatus = opencdm_session_status(m_pOpenCDMSession, key, keySize);
+                setKeyId(key, keySize);
+	}
+	m_keyStatusReady.signal();
+}
+
+DrmData * OcdmDrmSession::aampGenerateKeyRequest(string& destinationURL)
+{
+	DrmData * result = NULL;
+
+	m_eKeyState = KEY_ERROR;
+	if (m_challengeReady.wait(2000) == true) {
+		if (m_challenge.empty() != true) {
+			std::string delimiter (":Type:");
+			std::string requestType (m_challenge.substr(0, m_challenge.find(delimiter)));
+			if ( (requestType.size() != 0) && (requestType.size() !=  m_challenge.size()) ) {
+				m_challenge.erase(0, m_challenge.find(delimiter) + delimiter.length());
+			}
+
+			result = new DrmData(reinterpret_cast<uint8_t*>(const_cast<char*>(m_challenge.c_str())), m_challenge.length());
+			destinationURL.assign((m_destUrl.c_str()));
+			logprintf("destination url is %s\n", destinationURL.c_str());
+			m_eKeyState = KEY_PENDING;
+		}
+	}
+	return result;
+}
+
+
+int OcdmDrmSession::aampDRMProcessKey(DrmData* key)
+{
+	int retValue = -1;
+
+	OpenCDMError status = opencdm_session_update(m_pOpenCDMSession, key->getData(), key->getDataLength());
+	if (status == OpenCDMError::ERROR_NONE) {
+		if (m_keyStatusReady.wait(2000) == true) {
+			logprintf("Key Status updated");
+		}
+
+		if (m_keyStatus == KeyStatus::Usable) {
+			logprintf("processKey: Key Usable!\n");
+			m_eKeyState = KEY_READY;
+			retValue = 0;
+		} else {
+			logprintf("processKey: Update() returned keystatus: %d\n", (int) m_keyStatus);
+			m_eKeyState = KEY_ERROR;
+		}
+	}
+
+	return retValue;
+}
+
+int OcdmDrmSession::decrypt(const uint8_t *f_pbIV, uint32_t f_cbIV, const uint8_t *payloadData, uint32_t payloadDataSize, uint8_t **ppOpaqueData)
+{
+	int retValue = -1;
+
+	if (m_pOpenCDMSession) {
+		uint64_t start_decrypt_time;
+		uint64_t end_decrypt_time;
+
+		*ppOpaqueData = NULL;
+
+		// Verify output protection parameters
+		if(m_pOutputProtection->IsSourceUHD()) {
+			// Source material is UHD
+			if(!m_pOutputProtection->isHDCPConnection2_2()) {
+				// UHD and not HDCP 2.2
+				logprintf("%s : UHD source but not HDCP 2.2. FAILING decrypt\n", __FUNCTION__);
+				return HDCP_AUTHENTICATION_FAILURE;
+			}
+		}
+
+		pthread_mutex_lock(&m_decryptMutex);
+		start_decrypt_time = GetCurrentTimeStampInMSec();
+		GstBuffer *buffer = gst_buffer_new_wrapped (const_cast<uint8_t*>(payloadData), payloadDataSize);
+		GstBuffer *ivBuffer = gst_buffer_new_wrapped (const_cast<uint8_t*>(f_pbIV), f_cbIV);
+		GstBuffer *kidBuffer = gst_buffer_new_wrapped (const_cast<uint8_t*>(m_keyId), m_keySize);
+		retValue = opencdm_gstreamer_session_decrypt(m_pOpenCDMSession, buffer, nullptr, 0, ivBuffer, kidBuffer, 0);
+
+		end_decrypt_time = GetCurrentTimeStampInMSec();
+		if (payloadDataSize > 0) {
+			LogPerformanceExt(__FUNCTION__, start_decrypt_time, end_decrypt_time, payloadDataSize);
+		}
+		//gst_buffer_unref(buffer); TODO:recheck
+		pthread_mutex_unlock(&m_decryptMutex);
+	}
+	return retValue;
+}
+
+KeyState OcdmDrmSession::getState()
+{
+	return m_eKeyState;
+}
+
+void OcdmDrmSession:: clearDecryptContext()
+{
+	logprintf("[HHH] clearDecryptContext.\n");
+
+	pthread_mutex_lock(&m_decryptMutex);
+
+	if (m_pOpenCDMSession) {
+		opencdm_session_close(m_pOpenCDMSession);
+	}
+
+	pthread_mutex_unlock(&m_decryptMutex);
+	m_eKeyState = KEY_INIT;
+}
+
+void OcdmDrmSession::setKeyId(const uint8_t key[], const uint8_t keySize)
+{
+	if (!m_keyId) {
+		free(m_keyId);
+		m_keyId = (uint8_t *)malloc(keySize);
+	}
+	memcpy(m_keyId, key, keySize);
+	m_keySize = keySize;
+}
diff --git a/drm/opencdmsessionadapter.h b/drm/opencdmsessionadapter.h
index e69de29..02a03cd 100644
--- a/drm/opencdmsessionadapter.h
+++ b/drm/opencdmsessionadapter.h
@@ -0,0 +1,118 @@
+#ifndef OpenCDMSessionAdapter_h
+#define OpenCDMSessionAdapter_h
+
+
+#include "AampDrmSession.h"
+#include "aampoutputprotection.h"
+#include <open_cdm.h>
+#include <open_cdm_adapter.h>
+
+using namespace std;
+
+/**
+ * @class OcdmDrmSession
+ * @brief Open CDM DRM session
+ */
+
+class Event {
+private:
+	bool signalled; //TODO: added to handle the events fired before calling wait, need to recheck
+	pthread_mutex_t lock;
+	pthread_cond_t condition;
+public:
+	Event() : signalled(false), lock(PTHREAD_MUTEX_INITIALIZER), condition(PTHREAD_COND_INITIALIZER) {
+		pthread_cond_init(&condition, NULL);
+		pthread_mutex_init(&lock, NULL);
+	}
+	virtual ~Event() {
+		pthread_cond_destroy(&condition);
+		pthread_mutex_destroy(&lock);
+	}
+
+	inline bool wait(const uint32_t waitTime)
+	{
+		int ret = 0;
+		pthread_mutex_lock(&lock);
+		if (!signalled) {
+			if (waitTime == 0) {
+				ret = pthread_cond_wait(&condition, &lock);
+			} else {
+				struct timespec time;
+				clock_gettime(CLOCK_MONOTONIC, &time);
+
+				time.tv_nsec += ((waitTime % 1000) * 1000 * 1000);
+				time.tv_sec += (waitTime / 1000) + (time.tv_nsec / 1000000000);
+				time.tv_nsec = time.tv_nsec % 1000000000;
+
+				ret = pthread_cond_timedwait(&condition, &lock, &time);
+
+			}
+		}
+
+		signalled = false;
+		pthread_mutex_unlock(&lock);
+
+		return ((ret == 0)? true: false);
+	}
+
+	inline void signal()
+	{
+		pthread_mutex_lock(&lock);
+		signalled = true;
+		pthread_cond_broadcast(&condition);
+	        pthread_mutex_unlock(&lock);
+	}
+};
+
+class OcdmDrmSession : public AampDrmSession
+{
+
+private:
+	pthread_mutex_t m_decryptMutex;
+
+	KeyState m_eKeyState;
+
+	OpenCDMSession* m_pOpenCDMSession;
+	struct OpenCDMSystem* m_pOpenCDMSystem;
+	OpenCDMSessionCallbacks m_OCDMSessionCallbacks;
+	AampOutputProtection* m_pOutputProtection;
+
+	std::string m_challenge;
+	uint16_t m_challengeSize;
+
+	std::string m_destUrl;
+	KeyStatus m_keyStatus;
+
+	Event m_challengeReady;
+	Event m_keyStatusReady;
+	string m_sessionID;
+
+	uint8_t* m_keyId;
+	int8_t m_keySize;
+
+public:
+	void processOCDMChallenge(const char destUrl[], const uint8_t challenge[], const uint16_t challengeSize);
+	void keyUpdatedOCDM(const uint8_t key[], const uint8_t keySize);
+
+private:
+	void initAampDRMSystem();
+
+public:
+	OcdmDrmSession() = delete;
+	OcdmDrmSession(const OcdmDrmSession&) = delete;
+	OcdmDrmSession& operator=(const OcdmDrmSession&) = delete;
+
+	OcdmDrmSession(string& keySystem);
+	~OcdmDrmSession();
+	void generateAampDRMSession(const uint8_t *f_pbInitData,
+				    uint32_t f_cbInitData);
+	DrmData * aampGenerateKeyRequest(string& destinationURL);
+	int aampDRMProcessKey(DrmData* key);
+	int decrypt(const uint8_t *f_pbIV, uint32_t f_cbIV,
+		    const uint8_t *payloadData, uint32_t payloadDataSize, uint8_t **ppOpaqueData);
+	KeyState getState();
+	void clearDecryptContext();
+	void setKeyId(const uint8_t key[], const uint8_t keySize);
+};
+
+#endif
